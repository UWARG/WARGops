// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.2.2 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	TeamLeadScopes = "team_lead.Scopes"
	UserScopes     = "user.Scopes"
)

// Defines values for TransactionStatus.
var (
	UnknownTransactionStatus = TransactionStatus{}

	TransactionStatusN0 = TransactionStatus{0}

	TransactionStatusN1 = TransactionStatus{1}

	TransactionStatusN2 = TransactionStatus{2}

	TransactionStatusN3 = TransactionStatus{3}
)

// Defines values for TransactionType.
var (
	UnknownTransactionType = TransactionType{}

	TransactionTypeN0 = TransactionType{0}

	TransactionTypeN1 = TransactionType{1}

	TransactionTypeN2 = TransactionType{2}
)

// Account defines model for Account.
type Account struct {
	Active         bool                `json:"active"`
	Allocated      int                 `json:"allocated"`
	AllocationDate time.Time           `json:"allocation_date"`
	Balance        int                 `json:"balance"`
	CreationDate   time.Time           `json:"creation_date"`
	Creator        string              `json:"creator"`
	ExpiryDate     time.Time           `json:"expiry_date"`
	ID             string              `json:"id"`
	Name           string              `json:"name"`
	Pending        int                 `json:"pending"`
	PointOfContact openapi_types.Email `json:"point_of_contact"`
	Source         string              `json:"source"`
	Used           int                 `json:"used"`
	WaterlooID     string              `json:"waterloo_id"`
}

// NewAccount defines model for NewAccount.
type NewAccount struct {
	Active         bool                `json:"active"`
	AllocationDate time.Time           `json:"allocation_date"`
	Creator        string              `json:"creator"`
	ExpiryDate     time.Time           `json:"expiry_date"`
	ID             string              `json:"id"`
	Name           string              `json:"name"`
	PointOfContact openapi_types.Email `json:"point_of_contact"`
	Source         string              `json:"source"`
	WaterlooID     string              `json:"waterloo_id"`
}

// NewTransaction defines model for NewTransaction.
type NewTransaction struct {
	AccountID string            `json:"account_id"`
	Amount    int               `json:"amount"`
	ID        string            `json:"id"`
	Status    TransactionStatus `json:"status"`
	Type      TransactionType   `json:"type"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	AccountID    string            `json:"account_id"`
	Amount       int               `json:"amount"`
	ApprovalDate time.Time         `json:"approval_date"`
	CreationDate time.Time         `json:"creation_date"`
	ID           string            `json:"id"`
	Notes        string            `json:"notes"`
	PaymentDate  time.Time         `json:"payment_date"`
	RejectedDate time.Time         `json:"rejected_date"`
	Status       TransactionStatus `json:"status"`
	Type         TransactionType   `json:"type"`
}

// TransactionStatus defines model for TransactionStatus.
type TransactionStatus struct {
	value int
}

func (t *TransactionStatus) ToValue() int {
	return t.value
}
func (t *TransactionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *TransactionStatus) UnmarshalJSON(data []byte) error {
	var value int
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *TransactionStatus) FromValue(value int) error {
	switch value {

	case TransactionStatusN0.value:
		t.value = value
		return nil

	case TransactionStatusN1.value:
		t.value = value
		return nil

	case TransactionStatusN2.value:
		t.value = value
		return nil

	case TransactionStatusN3.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// TransactionType defines model for TransactionType.
type TransactionType struct {
	value int
}

func (t *TransactionType) ToValue() int {
	return t.value
}
func (t *TransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *TransactionType) UnmarshalJSON(data []byte) error {
	var value int
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *TransactionType) FromValue(value int) error {
	switch value {

	case TransactionTypeN0.value:
		t.value = value
		return nil

	case TransactionTypeN1.value:
		t.value = value
		return nil

	case TransactionTypeN2.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// CreateAccountJSONBody defines parameters for CreateAccount.
type CreateAccountJSONBody NewAccount

// CreateTransactionJSONBody defines parameters for CreateTransaction.
type CreateTransactionJSONBody NewTransaction

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody CreateAccountJSONBody

// Bind implements render.Binder.
func (CreateAccountJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody CreateTransactionJSONBody

// Bind implements render.Binder.
func (CreateTransactionJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ListAccountsJSON200Response is a constructor method for a ListAccounts response.
// A *Response is returned with the configured status code and content type from the spec.
func ListAccountsJSON200Response(body []Account) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateAccountJSON200Response is a constructor method for a CreateAccount response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateAccountJSON200Response(body Account) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateTransactionJSON200Response is a constructor method for a CreateTransaction response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateTransactionJSON200Response(body Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ListTransactionsJSON200Response is a constructor method for a ListTransactions response.
// A *Response is returned with the configured status code and content type from the spec.
func ListTransactionsJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ListAllTransactionsJSON200Response is a constructor method for a ListAllTransactions response.
// A *Response is returned with the configured status code and content type from the spec.
func ListAllTransactionsJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ListRejectedTransactionsJSON200Response is a constructor method for a ListRejectedTransactions response.
// A *Response is returned with the configured status code and content type from the spec.
func ListRejectedTransactionsJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ApproveTransactionJSON200Response is a constructor method for a ApproveTransaction response.
// A *Response is returned with the configured status code and content type from the spec.
func ApproveTransactionJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// HoldTransactionJSON200Response is a constructor method for a HoldTransaction response.
// A *Response is returned with the configured status code and content type from the spec.
func HoldTransactionJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// PayTransactionJSON200Response is a constructor method for a PayTransaction response.
// A *Response is returned with the configured status code and content type from the spec.
func PayTransactionJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// RejectTransactionJSON200Response is a constructor method for a RejectTransaction response.
// A *Response is returned with the configured status code and content type from the spec.
func RejectTransactionJSON200Response(body []Transaction) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the list of available accounts.
	// (GET /accounts)
	ListAccounts(w http.ResponseWriter, r *http.Request) *Response
	// Create a new account.
	// (POST /accounts)
	CreateAccount(w http.ResponseWriter, r *http.Request) *Response
	// Create a new transaction.
	// (POST /transactions)
	CreateTransaction(w http.ResponseWriter, r *http.Request) *Response
	// Retrieve the active transactions for an account.
	// (GET /transactions/{account_id})
	ListTransactions(w http.ResponseWriter, r *http.Request, accountID string) *Response
	// Retrieve all transactions, including those that are currently a request and not approved.
	// (GET /transactions/{account_id}/all)
	ListAllTransactions(w http.ResponseWriter, r *http.Request, accountID string) *Response
	// Retrieve all rejected transactions for an account.
	// (GET /transactions/{account_id}/rejected)
	ListRejectedTransactions(w http.ResponseWriter, r *http.Request, accountID string) *Response
	// Get transaction documents
	// (GET /transactions/{account_id}/{transaction_id}/ref)
	TransactionRef(w http.ResponseWriter, r *http.Request, accountID string, transactionID string) *Response
	// Approve a transaction.
	// (POST /transactions/{account_id}/{transaction_id}:approve)
	ApproveTransaction(w http.ResponseWriter, r *http.Request, accountID string, transactionID string) *Response
	// Hold back a transaction, and reset it to pending
	// (POST /transactions/{account_id}/{transaction_id}:hold)
	HoldTransaction(w http.ResponseWriter, r *http.Request, accountID string, transactionID string) *Response
	// Mark a transaction as paid.
	// (POST /transactions/{account_id}/{transaction_id}:pay)
	PayTransaction(w http.ResponseWriter, r *http.Request, accountID string, transactionID string) *Response
	// Reject a transaction.
	// (POST /transactions/{account_id}/{transaction_id}:reject)
	RejectTransaction(w http.ResponseWriter, r *http.Request, accountID string, transactionID string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// ListAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, UserScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListAccounts(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CreateAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateAccount(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CreateTransaction operation middleware
func (siw *ServerInterfaceWrapper) CreateTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, UserScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateTransaction(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ListTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	ctx = context.WithValue(ctx, UserScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListTransactions(w, r, accountID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ListAllTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListAllTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListAllTransactions(w, r, accountID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ListRejectedTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListRejectedTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ListRejectedTransactions(w, r, accountID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// TransactionRef operation middleware
func (siw *ServerInterfaceWrapper) TransactionRef(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionID string

	if err := runtime.BindStyledParameter("simple", false, "transaction_id", chi.URLParam(r, "transaction_id"), &transactionID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "transaction_id"})
		return
	}

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.TransactionRef(w, r, accountID, transactionID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// ApproveTransaction operation middleware
func (siw *ServerInterfaceWrapper) ApproveTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionID string

	if err := runtime.BindStyledParameter("simple", false, "transaction_id", chi.URLParam(r, "transaction_id"), &transactionID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "transaction_id"})
		return
	}

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ApproveTransaction(w, r, accountID, transactionID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// HoldTransaction operation middleware
func (siw *ServerInterfaceWrapper) HoldTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionID string

	if err := runtime.BindStyledParameter("simple", false, "transaction_id", chi.URLParam(r, "transaction_id"), &transactionID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "transaction_id"})
		return
	}

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.HoldTransaction(w, r, accountID, transactionID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// PayTransaction operation middleware
func (siw *ServerInterfaceWrapper) PayTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionID string

	if err := runtime.BindStyledParameter("simple", false, "transaction_id", chi.URLParam(r, "transaction_id"), &transactionID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "transaction_id"})
		return
	}

	ctx = context.WithValue(ctx, UserScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.PayTransaction(w, r, accountID, transactionID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// RejectTransaction operation middleware
func (siw *ServerInterfaceWrapper) RejectTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "account_id" -------------
	var accountID string

	if err := runtime.BindStyledParameter("simple", false, "account_id", chi.URLParam(r, "account_id"), &accountID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "account_id"})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionID string

	if err := runtime.BindStyledParameter("simple", false, "transaction_id", chi.URLParam(r, "transaction_id"), &transactionID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "transaction_id"})
		return
	}

	ctx = context.WithValue(ctx, TeamLeadScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RejectTransaction(w, r, accountID, transactionID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/accounts", wrapper.ListAccounts)
		r.Post("/accounts", wrapper.CreateAccount)
		r.Post("/transactions", wrapper.CreateTransaction)
		r.Get("/transactions/{account_id}", wrapper.ListTransactions)
		r.Get("/transactions/{account_id}/all", wrapper.ListAllTransactions)
		r.Get("/transactions/{account_id}/rejected", wrapper.ListRejectedTransactions)
		r.Get("/transactions/{account_id}/{transaction_id}/ref", wrapper.TransactionRef)
		r.Post("/transactions/{account_id}/{transaction_id}:approve", wrapper.ApproveTransaction)
		r.Post("/transactions/{account_id}/{transaction_id}:hold", wrapper.HoldTransaction)
		r.Post("/transactions/{account_id}/{transaction_id}:pay", wrapper.PayTransaction)
		r.Post("/transactions/{account_id}/{transaction_id}:reject", wrapper.RejectTransaction)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW3PbNhP9K/jw9ZERZfuNT3WaTpK2aTy2p31wNJ4VuJKQgAACgFIVj/57ByApXkS6",
	"kiPHzdRvvAB7OefsYsk7ylSmlUTpLE3uqGULzCBcnjOmcun8pTZKo3Ecwwtgji/RX7m1RprQqVICQdJN",
	"REEIxcBh6l9nXPIsz2gyjqqlXDqco2ks5UrepuCCvZkyGTiaUP/gheMZ0u1O6wyXc79xCgIkawbQsMoM",
	"PsRm2KZMw2b9Dv/S3KwPNMjTXlsSMux9oVGm/rI3Ka24dLdqdsuUdMBcKwzMgIu+EKzKDev3lltM+12t",
	"wKERSt32JrCJqMHPOTd++81uXDWQUSWTNn67tG/jLMFphxCAbMqqpr/MooauS/5ki4mafkTmfHq/4+pr",
	"dP09CuvY2vk3KmSA6msD0novSvbRHXRwOwAoZJVKdotkYIt14PJg+weDM5rQ/8d1d43L1ho3groqNmyq",
	"6PfeeO2Xd7FuJFQa3Ia0TWcQrceCCrQ2agniIWVzeLUNFYdyRSK71QHrDKU70I1BDxumB277LvTRJqyD",
	"UJeYLhQV1PvI7GqLBko/JNyMo5PoNDqbROHBK7SMJnSckJ+8S0w/yA/yJCEXRbf3d6cJuQAeXpwll2Ug",
	"tG/W6ELTcbrj8hVqZbkrXV4iz6a5seiBqBwbxXITnvR49GQjyw136yvPTqk+hIwIhCBSLmlCmVKf+Lax",
	"JdSitVxJsn1ecEsT+hIsZ7Un0PxXXJdHeThdZkKtvBdfBQeaRjBodm1vwhHl0EgQrxQLKaRomeG6aBP0",
	"F8UlUbkhKbdMmfR/ZOGctkkclw9GTGUxl0vuMDaf3/38x1l2tlj4o9sImtD9VoeMZsq7b5xhxdGV0Hy1",
	"AjMfTXPLJVr749w/95bq1N9A9gV2nK5Wq1Ee9vrFm6iT2/WCW8ItcQskf55fvn6vLTm/eEtSnHHJ/aIR",
	"jajgDKUNgiqdvXt7veNq4QMYZdy9KNePlJnHoa65E35X5eEFea9Rej9nozGN6BKNLeIZj8ajE79FaZSg",
	"OU3o2Wg8Og0l6haBnbgs8XAzx4CT7+OhYt+mNKG/cevOq0VFe0DrXqp0XUjHoNVK2kKvp+NxBToW/R20",
	"Frw4m+OPtjgqKh3dUe4w+8f2Vo1fm1pvxkCQW7NsaHJzV2r7ZrKZRNTmWQZmTRN6ic5wXGKgRnDriJoR",
	"WAIXMBVIKgw8PQ7mttH6LJ2Eicj2IFN0mSq6LjT7g3Bf7o3ps8j2q+DeC+UeVBttqAttAQIBInFVATmA",
	"4yaisavbasjgPmSbA8ajodt08sgId13tp90WwA34miC3UN0FOr6rD/LNvYV+3TTk24SBDB0aGwIMp4Rv",
	"HXWjbE0I9ejgTI5RA5buyD95kkbSIuA4zaT4IGnyYslMGQKyrxgO4SkGIe5vykI807Vnl9pyBkK0yIoI",
	"l0zkfj4kbqGsZxUcAYOE5cagdGJNgJTZE5ApkcqRYuTF9MHkVkPwvQxXA+ozzQ+huYL4UYrzrvGqJHQ2",
	"yGUjw0ucPSaDUa+xdqzfUhJfuG4rYvvZO+XSc7bzzXsY4a/RNeklqWJ5hsWkehRek7LSh2eV82JBe1j5",
	"zxD89DVf4k/gGMPRLv8LJdJh8t8okT4z/0TMe/DJFNinNvdROKUNWnSEO+IUqX/3H0cTGtbDkriA9bMi",
	"vv1U/g5MRwcELNHA0+P1gmKiGKa+mNee2X+y6c/Dv/9BEEybZUVN8QMuBs3j5QmN6BIMn4qQegCnNNP9",
	"oxm+z/3ng+86GUiYh5v6j1nnh+imS7ylnst+oxHJddpj3rW/CAZdtNZtJpu/AwAA//8XLujsvR8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
